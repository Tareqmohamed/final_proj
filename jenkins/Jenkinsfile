pipeline {
    agent {
        label 'tarek-agent'
    }
    
    environment {
        IMAGE_NAME = 'tareqmohamed/flask'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/Tareqmohamed/end-to-end-devops-flask-project'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${IMAGE_NAME}:v${BUILD_NUMBER}")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', '2') {
                        docker.image("${IMAGE_NAME}:v${BUILD_NUMBER}").push()
                    }
                }
            }
        }

        stage('Save Image Tag') {
            steps {
                script {
                    def image_name = "${IMAGE_NAME}:v${BUILD_NUMBER}"

                    dir('ansible') {
                        def ansible_path = sh(script: 'pwd', returnStdout: true).trim()
                        // Save ansible_path to an environment variable so it can be used later
                        env.ANSIBLE_PATH = ansible_path
                    }

                    // Save image_name to an environment variable for later use
                    env.IMAGE_NAME_TAG = image_name
                }
            }
        }

        stage('Deploy using Terraform') {
            steps {
                script {
                    dir('terraform') {
                        sh """
                        terraform init
                        terraform apply -var "ansible_path=${ANSIBLE_PATH}" -var "IMAGE_NAME=${IMAGE_NAME_TAG}" -auto-approve
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo 'Cleaning up Docker resources...'
                sh "docker rmi ${IMAGE_NAME}:v${BUILD_NUMBER}"
            }
        }
    }
}
